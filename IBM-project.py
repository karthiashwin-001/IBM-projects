# -*- coding: utf-8 -*-
"""codeanalysisAI.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nzBNr0b8eZv7uG4sdCqM5mXx4PZAvd5T
"""

!pip install transformers torch gradio PyPDF2 -q

import gradio as gr
import torch
from transformers import AutoTokenizer, AutoModelForCausalLM
import PyPDF2

# ---------------- Load Model ---------------- #
model_name = "ibm-granite/granite-3.2-2b-instruct"
tokenizer = AutoTokenizer.from_pretrained(model_name)
model = AutoModelForCausalLM.from_pretrained(
    model_name,
    torch_dtype=torch.float16 if torch.cuda.is_available() else torch.float32,
    device_map="auto" if torch.cuda.is_available() else None
)

if tokenizer.pad_token is None:
    tokenizer.pad_token = tokenizer.eos_token


# ---------------- Core Functions ---------------- #
def generate_response(prompt, max_length=1024):
    inputs = tokenizer(prompt, return_tensors="pt", truncation=True, max_length=512)

    if torch.cuda.is_available():
        inputs = {k: v.to(model.device) for k, v in inputs.items()}

    with torch.no_grad():
        outputs = model.generate(
            **inputs,
            max_length=max_length,
            temperature=0.7,
            do_sample=True,
            pad_token_id=tokenizer.eos_token_id
        )

    response = tokenizer.decode(outputs[0], skip_special_tokens=True)
    response = response.replace(prompt, "").strip()
    return response


def extract_text_from_pdf(pdf_file):
    if pdf_file is None:
        return ""

    try:
        pdf_reader = PyPDF2.PdfReader(pdf_file)
        text = ""
        for page in pdf_reader.pages:
            text += page.extract_text() + "\n"
        return text
    except Exception as e:
        return f"‚ùå Error reading PDF: {str(e)}"


def requirement_analysis(pdf_file, prompt_text):
    if pdf_file is not None:
        content = extract_text_from_pdf(pdf_file)
        analysis_prompt = (
            f"üîé Analyze the following document and extract key software requirements.\n\n"
            f"### ‚úÖ Functional Requirements\n"
            f"### ‚öôÔ∏è Non-functional Requirements\n"
            f"### üñ•Ô∏è Technical Specifications\n\n"
            f"{content}"
        )
    else:
        analysis_prompt = (
            f"üîé Analyze the following requirements and organize them into:\n"
            f"### ‚úÖ Functional Requirements\n"
            f"### ‚öôÔ∏è Non-functional Requirements\n"
            f"### üñ•Ô∏è Technical Specifications\n\n"
            f"{prompt_text}"
        )

    return generate_response(analysis_prompt, max_length=1200)


def code_generation(prompt, language):
    code_prompt = f"‚ö° Generate {language} code for the following requirement:\n\n{prompt}\n\nüíª Code:"
    return generate_response(code_prompt, max_length=1200)


# ---------------- Gradio UI ---------------- #
custom_css = """
#main-app {
    background: linear-gradient(135deg, #e6f7ff, #ffffff);
    color: #222;
    font-family: 'Segoe UI', sans-serif;
}
.gradio-container {
    max-width: 1200px !important;
    margin: auto;
}
.card {
    background: linear-gradient(180deg, #ffffff, #f9f9f9);
    border-radius: 18px;
    padding: 20px;
    border: 1px solid #e0e0e0;
    box-shadow: 0 6px 20px rgba(0,0,0,0.08);
    transition: transform 0.3s ease, box-shadow 0.3s ease;
}
.card:hover {
    transform: translateY(-5px);
    box-shadow: 0 8px 28px rgba(0,0,0,0.12);
}
h1 {
    background: linear-gradient(90deg, #0066cc, #00bfff);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
}
button.primary {
    background: linear-gradient(90deg, #007bff, #00c6ff) !important;
    color: white !important;
    border-radius: 10px !important;
    font-weight: bold !important;
    padding: 10px 16px !important;
    transition: 0.3s ease;
}
button.primary:hover {
    transform: scale(1.05);
    box-shadow: 0 4px 14px rgba(0, 118, 255, 0.4);
}
.tab-nav {
    font-weight: bold;
    font-size: 16px;
    color: #444;
}
.tab-nav:hover {
    color: #007bff !important;
}
.markdown-output {
    background: #f5faff;
    border: 1px solid #d0e7ff;
    border-radius: 12px;
    padding: 15px;
    min-height: 300px;
    font-size: 15px;
    color: #222;
    box-shadow: inset 0 2px 6px rgba(0,0,0,0.05);
}
"""

with gr.Blocks(css=custom_css, theme=gr.themes.Soft()) as app:
    with gr.Column(elem_id="main-app"):
        gr.HTML(
            """
            <div style="text-align:center; padding:20px;">
                <h1 style="font-size:36px; font-weight:bold;">
                    üöÄ AI Requirement Analyzer & Code Generator
                </h1>
                <p style="font-size:18px; color:#444;">
                    Smartly analyze requirements & auto-generate clean code
                </p>
            </div>
            """
        )

        with gr.Tabs():
            # ---------------- Requirement Analysis ---------------- #
            with gr.TabItem("üìë Requirement Analysis"):
                with gr.Row():
                    with gr.Column(scale=1, elem_classes="card"):
                        pdf_upload = gr.File(label="üìÇ Upload PDF", file_types=[".pdf"])
                        prompt_input = gr.Textbox(
                            label="üñäÔ∏è Or write requirements",
                            placeholder="Describe your software requirements here...",
                            lines=6
                        )
                        analyze_btn = gr.Button("üîç Analyze Requirements", elem_classes="primary")

                    with gr.Column(scale=2, elem_classes="card"):
                        analysis_output = gr.Markdown(
                            value="üìä Your analyzed requirements will appear here...",
                            label="‚úÖ Requirements Analysis",
                            elem_classes="markdown-output"
                        )

                analyze_btn.click(requirement_analysis, inputs=[pdf_upload, prompt_input], outputs=analysis_output)

            # ---------------- Code Generation ---------------- #
            with gr.TabItem("üíª Code Generation"):
                with gr.Row():
                    with gr.Column(scale=1, elem_classes="card"):
                        code_prompt = gr.Textbox(
                            label="üìù Code Requirements",
                            placeholder="Describe what code you want to generate...",
                            lines=6
                        )
                        language_dropdown = gr.Dropdown(
                            choices=["Python", "JavaScript", "Java", "C++", "C#", "PHP", "Go", "Rust"],
                            label="üåê Programming Language",
                            value="Python"
                        )
                        generate_btn = gr.Button("‚ö° Generate Code", elem_classes="primary")

                    with gr.Column(scale=2, elem_classes="card"):
                        code_output = gr.Code(label="üöÄ Generated Code", language="python")

                generate_btn.click(code_generation, inputs=[code_prompt, language_dropdown], outputs=code_output)

        # ---------------- Footer ---------------- #
        gr.HTML(
            """
            <div style="text-align:center; margin-top:30px; padding:10px; font-size:14px; color:#555;">
                üí° Built with <b>IBM Granite</b> + <b>Gradio</b> | üé® Enhanced Dynamic UI
            </div>
            """
        )

app.launch(share=True)